.TH ASSEMBLYLINE 3 2022-01-04 GNU

.SH NAME
assemblyline \- C library functions for generating machine code of intel x86_64 assembly language   
.br
               without invoking another compiler, assembler or linker 

.SH DESCRIPTION
This library provides a method to generate machine code from intel x86_64 assembly instructions  
.br
on-the-fly. Machine code can be written to a buffer passed as argument for 
.B asm_create_instance(3) 
.br
or an interal dynamically allocated buffer within assemblyline. An external buffer must be 
.br
greater than 20 bytes. An error will the thrown if written length exceeds (buffer length - 20).
.br
There is no size limit when using an internal buffer.

.SH SYNOPSIS
.TP
.BR #include " "<assemblyline.h>
.TP
.BI "assemblyline_t asm_create_instance(uint8_t *" buffer ", int " len );
Allocates an instance of assemblyline_t and attaches a pointer to a memory \fIbuffer\fR
.br
where machine code will be written to. Buffer length will be specified by \fIlen\fR.
.br
NOTE: \fIbuffer\fR could also be set to NULL for internal memory allocation.
.br
      In this case \fIlen\fR would be irrelevant and could be set to any number.

.TP
.BI "int asm_destroy_instance(assemblyline_t " instance );
Frees all memory associated with \fIinstance\fR.

.TP
.BI "int asm_assemble_str(assemblyline_t " al ", const char *" assembly_str );
Assembles the given string \fIassembly_str\fR containing valid x64 assembly code with instance \fIal\fR.
.br
It writes the corresponding machine code to the memory location specified by al->buffer.

.TP
.BI "int asm_assemble_file(assemblyline_t " al ", char *" asm_file );
Assembles the given file path \fIasm_file\fR containing valid x64 assembly code with instance \fIal\fR.
.br
It writes the corresponding machine code to the memory location specified by al->buffer.

.TP
.BI "int asm_assemble_string_counting_chunks(assemblyline_t " al ", char *" str ", int " chunk_size ", int *" dest );
Assembles the given null-terminated @param string with instance \fIal\fR.
.br
It counts the number of instructions that break the chunk boundary of size
.br
\fIchunk_size\fR and saves it to \fIdest\fR. It does not nop-pad by default, 
.br
depends on instance \fIal\fR (you can nop-pad and count different chunk breaks).
.br
NOTE: you cannot pass const char* as \fIstr\fR, it will segfault, because
.br
string will be altered.

.TP
.BI "void asm_set_chunk_size(assemblyline_t " al ", size_t " chunk_size );
Sets a given chunk size boundary \fIchunk_size\fR in bytes with instance \fIal\fR. 
.br
When called before assemble_str() or assemble_file() assemblyline will ensure no 
.br
instruction opcode will cross the specified  \fIchunk_size\fR boundary via nop padding.
.br
NOTE: \fIchunk_size\fR must be greater than 2 in order to
.br
      be classified as a valid memory chunk boundary size.

.TP
.BI "void asm_set_debug(assemblyline_t " al ", bool " debug );
Set debug flag \fIdebug\fR to true or false with instance \fIal\fR. When is set \fIdebug\fR to true 
.br
machine code represented in hexidecimal will be printed to stdout.

.TP
.BI "int asm_get_offset(assemblyline_t " al );
Returns the offset associated with \fIal\fR.

.TP
.BI "void asm_set_offset(assemblyline_t " al ", int "offset );
Sets a memory \fIoffset\fR to specify exact location in memory block for writting
.br
machine code with instance \fIal\fR\.
.br
NOTE: \fIoffset\fR could be set to 0 for the resulting memory block.

.TP
.BI "void *asm_get_code(assemblyline_t " al );
Returns the buffer associated with \fIal\fR as type void* for easy typecasting to any 
.br
function pointer format.

.TP
.BI "uint8_t *asm_get_buffer(assemblyline_t " al );
Returns the buffer associated with \fIal\fR (DEPRECATED: use 
\fBasm_get_code(3)\fR instead).

.TP
.BI "void strict_mov_imm_handling(assemblyline_t " al );
Disables nasm-style mov-immediate register-size optimization.
.br
ex: even if immediate size for mov is less than or equal to max signed 32 bit assemblyline 
.br
    will pad the immediate to fit 64bit.
.br
That is: "mov rax,0x7fffffff" as "mov rax,0x000000007fffffff" 
.br
          -> 48 b8 ff ff ff 7f 00 00 00 00

.TP
.BI "void nasm_mov_imm_handling(assemblyline_t " al );
Enables nasm-style mov-immediate register-size optimization.
.br
ex: if immediate size for mov is less than or equal to max signed 32 bit assemblyline 
.br
    will emit code to mov to 32-bit register rather than 64-bit.
.br
That is: "mov rax, 0x7fffffff" as "mov eax, 0x7fffffff" -> b8 ff ff ff 7f

.TP
.BI "void smart_mov_imm_handling(assemblyline_t " al );
Assemblyline will check the immediate value for leading 0's and thus allows manual
.br 
optimizations. This is currently set as default.
.br
ex: "mov rax, 0x000000007fffffff" ->  48 b8 ff ff ff 7f 00 00 00 00
.br
    "mov rax, 0x7fffffff" -> b8 ff ff ff 7f

.SH SEE ALSO
.B asmline(1)
