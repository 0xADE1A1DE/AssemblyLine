name: CI Build

env:
  REPO: hugsy/AssemblyLine
  VERBOSE: "1"
  CMAKE_FLAGS: "-DDEBUG=ON -DBUILD_TOOLKIT=ON -DBUILD_TEST=ON"

on: push

jobs:
  mini_build:
    name: "${{ matrix.configuration }} build AssemblyLine for ${{ matrix.os }}/${{ matrix.platform }}"

    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest']
        platform: ['x64']
        configuration: ['RelWithDebInfo', 'Debug']

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Sets Windows specific environment variables
      shell: powershell
      run: |
        echo "NB_CPU=$env:NUMBER_OF_PROCESSORS" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      if: matrix.os == 'windows-latest'

    - name: Sets Linux specific environment variables
      run: |
        echo "NB_CPU=$(grep -c ^processor /proc/cpuinfo)" >> $GITHUB_ENV
      if: matrix.os == 'ubuntu-latest'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: cpp
      if: matrix.os == 'ubuntu-latest'

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: ${{ matrix.platform }}
      if: matrix.os == 'windows-latest'

    - name: Build assemblyline.dll
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        New-Item -Type Directory -Name build
        Set-Location .\build
        cmake .. ${{ env.CMAKE_FLAGS }}
        msbuild.exe ALL_BUILD.vcxproj -nologo /maxCpuCount:${{ env.NB_CPU }} /verbosity:n /m /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}
        Set-Location ..

    - name: Build libassemblyline.so
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        mkdir ./build
        cd ./build
        cmake .. ${{ env.CMAKE_FLAGS }}
        make -j${{ env.NB_CPU }}
        cd ..

    - name: Run Windows tests
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Set-Location .\build\test\
        ctest --parallel=${{ env.NB_CPU }} --extra-verbose
        Set-Location ..\

    - name: Run Linux tests
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        for i in test/test_*
        do
          test -f $i && $i
        done
        cd build/test
        ctest --parallel=${{ env.NB_CPU }} --extra-verbose
        cd ../..

    - name: Perform CodeQL Analysis
      if: matrix.os == 'ubuntu-latest'
      uses: github/codeql-action/analyze@v1

    - name: Prepare Windows artifact
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        New-Item -Type Directory -Name artifact\
        Copy-Item -Verbose build\src\${{ matrix.configuration }}\AssemblyLine.lib artifact\
        Copy-Item -Verbose build\src\${{ matrix.configuration }}\AssemblyLine.dll artifact\
        Copy-Item -Verbose build\src\${{ matrix.configuration }}\AssemblyLine.pdb artifact\

        Copy-Item -Verbose build\tools\${{ matrix.configuration }}\asmline.exe artifact\

        New-Item -Type Directory -Name artifact\include\
        Copy-Item src\assemblyline.h artifact\include\

    - name: Prepare Linux artifact
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        mkdir -p artifact/include/linux/
        cp -v build/src/libassemblyline.so* artifact/
        cp -v build/assemblyline.pc artifact/
        cp -v build/tools/asmline artifact/
        cp -v src/assemblyline.h artifact/include/

    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: assemblyline_${{ env.GITHUB_REF_SLUG }}_${{ matrix.os }}_${{ matrix.platform }}_${{ env.GITHUB_SHA_SHORT }}
        path: artifact/

